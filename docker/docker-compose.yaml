version: "3.4"
networks:
  web:
  backend:
services:
  postgres:
    image: postgres:10.1-alpine
    restart: always
    environment:
      POSTGRES_USER: $POSTGRES_USER
      POSTGRES_PASSWORD: $POSTGRES_PASSWORD
      POSTGRES_DB: login
    volumes:
      # - ./login/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
      - '$POSTGRES_DATA_LOC:/var/lib/postgresql/data'
    networks:
      - backend
    labels:
      - "traefik.enable=false"
  mongo:
    image: mongo:3.6.2-jessie
    restart: always
    volumes:
      - '$MONGO_DATA_LOC:/data/db'
    networks:
      - backend
    labels:
      - "traefik.enable=false"
    healthcheck:
      test: "mongo --quiet localhost/notes --eval 'quit(db.runCommand({ ping: 1}).ok ? 0 : 2)' || exit 1"
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 15s
  notes:
    image: notes:latest
    restart: always
    environment:
      - PORT=8889
      - HTTPPORT=8888
      - DBHOST=mongo
      - DBPORT=27017
      - DBNAME=notes
      - COLLECTION=store
    networks:
      - backend
    healthcheck:
      test: ["CMD", "/go/bin/healthcheck"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s
  search:
    image: docker.elastic.co/elasticsearch/elasticsearch-oss:6.2.2
    restart: always
    environment:
      - "discovery.type=single-node"
    volumes:
      - "$SEARCH_DATA_LOC:/usr/share/elasticsearch/data"
    networks:
      - backend
    labels:
      - "traefik.enable=false"
    healthcheck:
      test: curl localhost:9200/_cat/health?pretty || exit 1
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
  gateway:
    image: gateway:latest
    restart: always
    environment:
      LOGINHOST: login
      LOGINPORT: 8888
      NOTESHOST: notes
      NOTESPORT: 8889
      SEARCHHOST: search
      SEARCHPORT: 9200
      SEARCHINDEX: notes
      SEARCHTYPE: note
      HTTPPORT: 8081
      PUBKEY: "-----BEGIN PUBLIC KEY-----\n${KEY}\n-----END PUBLIC KEY-----"
    healthcheck:
      test: ["CMD", "/go/bin/healthcheck"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    depends_on:
      - search
      - notes
    networks:
      - web
      - backend
    labels:
      - "traefik.backend=gateway"
      - "traefik.docker.network=${NETWORK}_web"
      - "traefik.frontend.rule=PathPrefix:/notes;Host:$HOST"
      - "traefik.enable=true"
      - "traefik.port=8081"
  keycloak:
    image: keycloak:latest
    restart: always
    environment:
      - DB_VENDOR=POSTGRES
      - PROXY_ADDRESS_FORWARDING=true
      - POSTGRES_ADDR=postgres
      - POSTGRES_USER=$POSTGRES_USER
      - POSTGRES_PASSWORD=$POSTGRES_PASSWORD
      - POSTGRES_DATABASE=login
      - KEYCLOAK_USER=$KEYCLOAK_USER
      - KEYCLOAK_PASSWORD=$KEYCLOAK_PASSWORD
    depends_on:
      - postgres
    networks:
      - web
      - backend
    labels:
      - "traefik.backend=keycloak"
      - "traefik.docker.network=${NETWORK}_web"
      - "traefik.frontend.rule=PathPrefix:/auth;Host:$HOST"
      - "traefik.enable=true"
      - "traefik.port=8080"
    healthcheck:
      test: curl localhost:8080/auth
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 5s
  frontend:
    image: frontend:latest
    restart: always
    networks:
      - web
      - backend
    labels:
      - "traefik.backend=frontend"
      - "traefik.docker.network=${NETWORK}_web"
      - "traefik.frontend.rule=PathPrefix:/;Host:$HOST"
      - "traefik.enable=true"
      - "traefik.port=80"
      - "traefik.default.protocol=http"
      - "traefik.passHostHeader=true"
    healthcheck:
      test: curl --fail localhost
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 5s
  # frontend:
  #   image: node:9.11-alpine
  #   command: 'npm run dev'
  #   working_dir: /frontend
  #   user: node
  #   environment:
  #     - PORT=8091
  #     - HOST=0.0.0.0
  #   volumes:
  #     - "../pkg/frontend:/frontend:ro"
  #   restart: always
  #   networks:
  #     - web
  #     - backend
  #   labels:
  #     - "traefik.backend=frontend"
  #     - "traefik.docker.network=${NETWORK}_web"
  #     - "traefik.frontend.rule=PathPrefix:/;Host:$HOST"
  #     - "traefik.enable=true"
  #     - "traefik.port=8091"
  #     - "traefik.default.protocol=http"
  #     - "traefik.passHostHeader=true"
  traefik:
    image: traefik:1.5.4-alpine
    container_name: traefik
    restart: always
    command: --docker  --api
    ports:
      - "80:80"     #The HTTP port
      - "443:443"
      - "8080:8080" #The Web UI (enabled by --api)
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock #So that Traefik can listen to the Docker events
      - ../pkg/traefik/${ENV}.traefik.toml:/traefik.toml:ro
      - ./traefik/acme.json:/acme.json
    networks:
      - web
    labels:
      - "traefik.frontend.rule=Host:$HOST"