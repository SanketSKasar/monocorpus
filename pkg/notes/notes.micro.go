// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: notes.proto

/*
Package notes is a generated protocol buffer package.

It is generated from these files:
	notes.proto

It has these top-level messages:
	Query
	NoteList
	Tag
	Note
	Empty
*/
package notes

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/golang/protobuf/ptypes/timestamp"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Notes service

type NotesService interface {
	CreateNote(ctx context.Context, in *Note, opts ...client.CallOption) (*Note, error)
	DeleteNote(ctx context.Context, in *Note, opts ...client.CallOption) (*Note, error)
	UpdateNote(ctx context.Context, in *Note, opts ...client.CallOption) (*Note, error)
	GetNotes(ctx context.Context, in *Query, opts ...client.CallOption) (*NoteList, error)
}

type notesService struct {
	c    client.Client
	name string
}

func NewNotesService(name string, c client.Client) NotesService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "notes"
	}
	return &notesService{
		c:    c,
		name: name,
	}
}

func (c *notesService) CreateNote(ctx context.Context, in *Note, opts ...client.CallOption) (*Note, error) {
	req := c.c.NewRequest(c.name, "Notes.createNote", in)
	out := new(Note)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notesService) DeleteNote(ctx context.Context, in *Note, opts ...client.CallOption) (*Note, error) {
	req := c.c.NewRequest(c.name, "Notes.deleteNote", in)
	out := new(Note)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notesService) UpdateNote(ctx context.Context, in *Note, opts ...client.CallOption) (*Note, error) {
	req := c.c.NewRequest(c.name, "Notes.updateNote", in)
	out := new(Note)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notesService) GetNotes(ctx context.Context, in *Query, opts ...client.CallOption) (*NoteList, error) {
	req := c.c.NewRequest(c.name, "Notes.getNotes", in)
	out := new(NoteList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Notes service

type NotesHandler interface {
	CreateNote(context.Context, *Note, *Note) error
	DeleteNote(context.Context, *Note, *Note) error
	UpdateNote(context.Context, *Note, *Note) error
	GetNotes(context.Context, *Query, *NoteList) error
}

func RegisterNotesHandler(s server.Server, hdlr NotesHandler, opts ...server.HandlerOption) error {
	type notes interface {
		CreateNote(ctx context.Context, in *Note, out *Note) error
		DeleteNote(ctx context.Context, in *Note, out *Note) error
		UpdateNote(ctx context.Context, in *Note, out *Note) error
		GetNotes(ctx context.Context, in *Query, out *NoteList) error
	}
	type Notes struct {
		notes
	}
	h := &notesHandler{hdlr}
	return s.Handle(s.NewHandler(&Notes{h}, opts...))
}

type notesHandler struct {
	NotesHandler
}

func (h *notesHandler) CreateNote(ctx context.Context, in *Note, out *Note) error {
	return h.NotesHandler.CreateNote(ctx, in, out)
}

func (h *notesHandler) DeleteNote(ctx context.Context, in *Note, out *Note) error {
	return h.NotesHandler.DeleteNote(ctx, in, out)
}

func (h *notesHandler) UpdateNote(ctx context.Context, in *Note, out *Note) error {
	return h.NotesHandler.UpdateNote(ctx, in, out)
}

func (h *notesHandler) GetNotes(ctx context.Context, in *Query, out *NoteList) error {
	return h.NotesHandler.GetNotes(ctx, in, out)
}
