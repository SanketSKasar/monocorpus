// Code generated by protoc-gen-go. DO NOT EDIT.
// source: notes.proto

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	notes.proto

It has these top-level messages:
	Query
	NoteList
	Tag
	Note
	Empty
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// service Notes {
// 	rpc CreateNote(ctx *context.Context, note *api.Note) error
// 	rpc DeleteNote(ctx *context.Context, note *api.Note) error
// 	rpc UpdateNote(ctx *context.Context, note *api.Note) error
// 	GetNotes(ctx *context.Context, queryRequest *api.QueryRequest) ([]api.Note, error)
// }
// err := s.noteCollection.Remove(&api.Note{
//   Title:       note.Title,
//   Author:      note.Author,
//   Team:        note.Team,
//   DateCreated: note.DateCreated,
// })
type Query struct {
	IDs      []string                   `protobuf:"bytes,1,rep,name=IDs" json:"IDs,omitempty"`
	Title    string                     `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	Team     string                     `protobuf:"bytes,3,opt,name=team" json:"team,omitempty"`
	Authors  []string                   `protobuf:"bytes,4,rep,name=authors" json:"authors,omitempty"`
	Todate   *google_protobuf.Timestamp `protobuf:"bytes,5,opt,name=todate" json:"todate,omitempty"`
	Fromdate *google_protobuf.Timestamp `protobuf:"bytes,6,opt,name=fromdate" json:"fromdate,omitempty"`
	Tags     []string                   `protobuf:"bytes,7,rep,name=tags" json:"tags,omitempty"`
}

func (m *Query) Reset()                    { *m = Query{} }
func (m *Query) String() string            { return proto.CompactTextString(m) }
func (*Query) ProtoMessage()               {}
func (*Query) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Query) GetIDs() []string {
	if m != nil {
		return m.IDs
	}
	return nil
}

func (m *Query) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Query) GetTeam() string {
	if m != nil {
		return m.Team
	}
	return ""
}

func (m *Query) GetAuthors() []string {
	if m != nil {
		return m.Authors
	}
	return nil
}

func (m *Query) GetTodate() *google_protobuf.Timestamp {
	if m != nil {
		return m.Todate
	}
	return nil
}

func (m *Query) GetFromdate() *google_protobuf.Timestamp {
	if m != nil {
		return m.Fromdate
	}
	return nil
}

func (m *Query) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

type NoteList struct {
	Notes []*Note `protobuf:"bytes,1,rep,name=notes" json:"notes,omitempty"`
}

func (m *NoteList) Reset()                    { *m = NoteList{} }
func (m *NoteList) String() string            { return proto.CompactTextString(m) }
func (*NoteList) ProtoMessage()               {}
func (*NoteList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *NoteList) GetNotes() []*Note {
	if m != nil {
		return m.Notes
	}
	return nil
}

type Tag struct {
	Text  string `protobuf:"bytes,1,opt,name=text" json:"text,omitempty"`
	Color string `protobuf:"bytes,2,opt,name=color" json:"color,omitempty"`
}

func (m *Tag) Reset()                    { *m = Tag{} }
func (m *Tag) String() string            { return proto.CompactTextString(m) }
func (*Tag) ProtoMessage()               {}
func (*Tag) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Tag) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *Tag) GetColor() string {
	if m != nil {
		return m.Color
	}
	return ""
}

type Note struct {
	Id           string                     `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Title        string                     `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	Author       string                     `protobuf:"bytes,3,opt,name=author" json:"author,omitempty"`
	Team         string                     `protobuf:"bytes,4,opt,name=team" json:"team,omitempty"`
	Body         string                     `protobuf:"bytes,5,opt,name=body" json:"body,omitempty"`
	Type         string                     `protobuf:"bytes,6,opt,name=type" json:"type,omitempty"`
	DateCreated  *google_protobuf.Timestamp `protobuf:"bytes,7,opt,name=dateCreated" json:"dateCreated,omitempty"`
	DateModified *google_protobuf.Timestamp `protobuf:"bytes,8,opt,name=dateModified" json:"dateModified,omitempty"`
	Link         string                     `protobuf:"bytes,9,opt,name=link" json:"link,omitempty"`
	Image        []byte                     `protobuf:"bytes,10,opt,name=image,proto3" json:"image,omitempty"`
	Tags         []*Tag                     `protobuf:"bytes,11,rep,name=tags" json:"tags,omitempty"`
}

func (m *Note) Reset()                    { *m = Note{} }
func (m *Note) String() string            { return proto.CompactTextString(m) }
func (*Note) ProtoMessage()               {}
func (*Note) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Note) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Note) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Note) GetAuthor() string {
	if m != nil {
		return m.Author
	}
	return ""
}

func (m *Note) GetTeam() string {
	if m != nil {
		return m.Team
	}
	return ""
}

func (m *Note) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

func (m *Note) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Note) GetDateCreated() *google_protobuf.Timestamp {
	if m != nil {
		return m.DateCreated
	}
	return nil
}

func (m *Note) GetDateModified() *google_protobuf.Timestamp {
	if m != nil {
		return m.DateModified
	}
	return nil
}

func (m *Note) GetLink() string {
	if m != nil {
		return m.Link
	}
	return ""
}

func (m *Note) GetImage() []byte {
	if m != nil {
		return m.Image
	}
	return nil
}

func (m *Note) GetTags() []*Tag {
	if m != nil {
		return m.Tags
	}
	return nil
}

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func init() {
	proto.RegisterType((*Query)(nil), "pb.Query")
	proto.RegisterType((*NoteList)(nil), "pb.NoteList")
	proto.RegisterType((*Tag)(nil), "pb.Tag")
	proto.RegisterType((*Note)(nil), "pb.Note")
	proto.RegisterType((*Empty)(nil), "pb.Empty")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Notes service

type NotesClient interface {
	CreateNote(ctx context.Context, in *Note, opts ...grpc.CallOption) (*Note, error)
	DeleteNote(ctx context.Context, in *Note, opts ...grpc.CallOption) (*Note, error)
	UpdateNote(ctx context.Context, in *Note, opts ...grpc.CallOption) (*Note, error)
	GetNotes(ctx context.Context, in *Query, opts ...grpc.CallOption) (*NoteList, error)
}

type notesClient struct {
	cc *grpc.ClientConn
}

func NewNotesClient(cc *grpc.ClientConn) NotesClient {
	return &notesClient{cc}
}

func (c *notesClient) CreateNote(ctx context.Context, in *Note, opts ...grpc.CallOption) (*Note, error) {
	out := new(Note)
	err := grpc.Invoke(ctx, "/pb.Notes/createNote", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notesClient) DeleteNote(ctx context.Context, in *Note, opts ...grpc.CallOption) (*Note, error) {
	out := new(Note)
	err := grpc.Invoke(ctx, "/pb.Notes/deleteNote", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notesClient) UpdateNote(ctx context.Context, in *Note, opts ...grpc.CallOption) (*Note, error) {
	out := new(Note)
	err := grpc.Invoke(ctx, "/pb.Notes/updateNote", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notesClient) GetNotes(ctx context.Context, in *Query, opts ...grpc.CallOption) (*NoteList, error) {
	out := new(NoteList)
	err := grpc.Invoke(ctx, "/pb.Notes/getNotes", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Notes service

type NotesServer interface {
	CreateNote(context.Context, *Note) (*Note, error)
	DeleteNote(context.Context, *Note) (*Note, error)
	UpdateNote(context.Context, *Note) (*Note, error)
	GetNotes(context.Context, *Query) (*NoteList, error)
}

func RegisterNotesServer(s *grpc.Server, srv NotesServer) {
	s.RegisterService(&_Notes_serviceDesc, srv)
}

func _Notes_CreateNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Note)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotesServer).CreateNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Notes/CreateNote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotesServer).CreateNote(ctx, req.(*Note))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notes_DeleteNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Note)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotesServer).DeleteNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Notes/DeleteNote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotesServer).DeleteNote(ctx, req.(*Note))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notes_UpdateNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Note)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotesServer).UpdateNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Notes/UpdateNote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotesServer).UpdateNote(ctx, req.(*Note))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notes_GetNotes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotesServer).GetNotes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Notes/GetNotes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotesServer).GetNotes(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

var _Notes_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Notes",
	HandlerType: (*NotesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createNote",
			Handler:    _Notes_CreateNote_Handler,
		},
		{
			MethodName: "deleteNote",
			Handler:    _Notes_DeleteNote_Handler,
		},
		{
			MethodName: "updateNote",
			Handler:    _Notes_UpdateNote_Handler,
		},
		{
			MethodName: "getNotes",
			Handler:    _Notes_GetNotes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "notes.proto",
}

func init() { proto.RegisterFile("notes.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 433 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x93, 0xc1, 0x8a, 0xd4, 0x40,
	0x10, 0x86, 0x49, 0x26, 0x99, 0x24, 0x95, 0x41, 0xa4, 0x11, 0x69, 0x46, 0xd0, 0x30, 0x5e, 0x06,
	0x0f, 0x19, 0x18, 0xc1, 0x93, 0x78, 0x51, 0x0f, 0x82, 0x0a, 0x86, 0x79, 0x81, 0xce, 0x76, 0x4f,
	0x6c, 0x4c, 0xb6, 0x9b, 0xa4, 0x06, 0x36, 0xaf, 0xe1, 0x3b, 0xf9, 0x18, 0xbe, 0x8b, 0x74, 0x75,
	0x12, 0xd6, 0xc3, 0xee, 0xdc, 0xea, 0xaf, 0xfc, 0xd5, 0xf9, 0xeb, 0xeb, 0x04, 0xf2, 0x5b, 0x83,
	0x6a, 0x28, 0x6d, 0x6f, 0xd0, 0xb0, 0xd0, 0xd6, 0xdb, 0x57, 0x8d, 0x31, 0x4d, 0xab, 0x0e, 0xd4,
	0xa9, 0x2f, 0xe7, 0x03, 0xea, 0x4e, 0x0d, 0x28, 0x3a, 0xeb, 0x4d, 0xbb, 0xbf, 0x01, 0xc4, 0x3f,
	0x2e, 0xaa, 0x1f, 0xd9, 0x53, 0x58, 0x7d, 0xf9, 0x34, 0xf0, 0xa0, 0x58, 0xed, 0xb3, 0xca, 0x95,
	0xec, 0x19, 0xc4, 0xa8, 0xb1, 0x55, 0x3c, 0x2c, 0x82, 0x7d, 0x56, 0x79, 0xc1, 0x18, 0x44, 0xa8,
	0x44, 0xc7, 0x57, 0xd4, 0xa4, 0x9a, 0x71, 0x48, 0xc4, 0x05, 0x7f, 0x9a, 0x7e, 0xe0, 0x11, 0xcd,
	0xcf, 0x92, 0x1d, 0x61, 0x8d, 0x46, 0x0a, 0x54, 0x3c, 0x2e, 0x82, 0x7d, 0x7e, 0xdc, 0x96, 0x3e,
	0x51, 0x39, 0x27, 0x2a, 0x4f, 0x73, 0xa2, 0x6a, 0x72, 0xb2, 0x77, 0x90, 0x9e, 0x7b, 0xd3, 0xd1,
	0xd4, 0xfa, 0xea, 0xd4, 0xe2, 0xa5, 0x64, 0xa2, 0x19, 0x78, 0x42, 0x11, 0xa8, 0xde, 0xbd, 0x81,
	0xf4, 0xbb, 0x41, 0xf5, 0x55, 0x0f, 0xc8, 0x5e, 0x42, 0x4c, 0x7c, 0x68, 0xc7, 0xfc, 0x98, 0x96,
	0xb6, 0x2e, 0xdd, 0xc3, 0xca, 0xb7, 0x77, 0x07, 0x58, 0x9d, 0x44, 0xe3, 0x17, 0xbc, 0x43, 0x1e,
	0xcc, 0x0b, 0xde, 0xa1, 0x43, 0x71, 0x63, 0x5a, 0xd3, 0xcf, 0x28, 0x48, 0xec, 0xfe, 0x84, 0x10,
	0xb9, 0x03, 0xd8, 0x13, 0x08, 0xb5, 0x9c, 0x06, 0x42, 0x2d, 0x1f, 0x20, 0xf7, 0x1c, 0xd6, 0x1e,
	0xcb, 0xc4, 0x6e, 0x52, 0x0b, 0xd1, 0xe8, 0x1e, 0x51, 0x06, 0x51, 0x6d, 0xe4, 0x48, 0xd4, 0xb2,
	0x8a, 0x6a, 0xf2, 0x8d, 0xd6, 0x33, 0x71, 0xbe, 0xd1, 0x2a, 0xf6, 0x1e, 0x72, 0xb7, 0xfb, 0xc7,
	0x5e, 0x09, 0x54, 0x92, 0x27, 0x57, 0x71, 0xdd, 0xb7, 0xb3, 0x0f, 0xb0, 0x71, 0xf2, 0x9b, 0x91,
	0xfa, 0xac, 0x95, 0xe4, 0xe9, 0xd5, 0xf1, 0xff, 0xfc, 0x2e, 0x51, 0xab, 0x6f, 0x7f, 0xf1, 0xcc,
	0x27, 0x72, 0xb5, 0xdb, 0x5d, 0x77, 0xa2, 0x51, 0x1c, 0x8a, 0x60, 0xbf, 0xa9, 0xbc, 0x60, 0x2f,
	0xa6, 0xbb, 0xc9, 0x09, 0x7d, 0xe2, 0xd0, 0x9f, 0x44, 0x33, 0x5d, 0x52, 0x02, 0xf1, 0xe7, 0xce,
	0xe2, 0x78, 0xfc, 0x1d, 0x40, 0xec, 0x80, 0x0e, 0xac, 0x00, 0xb8, 0xa1, 0x90, 0xc4, 0x77, 0xb9,
	0xaa, 0xed, 0x52, 0x39, 0x87, 0x54, 0xad, 0x7a, 0xdc, 0x71, 0xb1, 0xf2, 0xb1, 0x33, 0x5e, 0x43,
	0xda, 0x28, 0xf4, 0x6f, 0xcc, 0x5c, 0x97, 0x7e, 0x85, 0xed, 0x66, 0x36, 0xb8, 0xcf, 0xa6, 0x5e,
	0x13, 0x86, 0xb7, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0xa7, 0xe9, 0x81, 0xbc, 0x5d, 0x03, 0x00,
	0x00,
}
