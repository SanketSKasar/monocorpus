
stages:
  - build
  - release

variables:
  TEST_IMAGE: ${CI_REGISTRY}/${CI_PROJECT_PATH}:${CI_COMMIT_REF_NAME}
  RELEASE_IMAGE: ${CI_REGISTRY}/${CI_PROJECT_PATH}:latest

image: docker:stable-git

before_script:
  - docker version
  - "docker info"
  - "docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY"
  - git clone https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.com/team-notes/notes notes
after_script:
  - "docker logout ${CI_REGISTRY}"

build:
  stage: build
  services:
    - docker:dind
  variables:
    DOCKER_DRIVER: "overlay"
  script:
    - "docker build -t $TEST_IMAGE --pull ."
    - "docker push $TEST_IMAGE"
  only:
    - master
    - develop
  
release:
  stage: release
  services:
    - docker:dind
  variables:
    DOCKER_DRIVER: "overlay"
  script:
    - "docker pull $TEST_IMAGE"
    - "docker tag $TEST_IMAGE $RELEASE_IMAGE"
    - "docker push $RELEASE_IMAGE"
  only:
    - master

container_scanning:
  stage: release
  only:
    - master
  variables:
    DOCKER_DRIVER: overlay2
    ## Define two new variables based on GitLab's CI/CD predefined variables
    ## https://docs.gitlab.com/ee/ci/variables/#predefined-variables-environment-variables
    CI_APPLICATION_REPOSITORY: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG
    CI_APPLICATION_TAG: $CI_COMMIT_SHA
  allow_failure: true
  services:
    - docker:stable-dind
  script:
    - docker run -d --name db arminc/clair-db:latest
    - docker run -p 6060:6060 --link db:postgres -d --name clair arminc/clair-local-scan:v2.0.1
    - apk add -U wget ca-certificates
    - docker pull ${CI_APPLICATION_REPOSITORY}:${CI_APPLICATION_TAG}
    - wget https://github.com/arminc/clair-scanner/releases/download/v8/clair-scanner_linux_amd64
    - mv clair-scanner_linux_amd64 clair-scanner
    - chmod +x clair-scanner
    - touch clair-whitelist.yml
    - while( ! wget -q -O /dev/null http://docker:6060/v1/namespaces ) ; do sleep 1 ; done
    - retries=0
    - echo "Waiting for clair daemon to start"
    - while( ! wget -T 10 -q -O /dev/null http://docker:6060/v1/namespaces ) ; do sleep 1 ; echo -n "." ; if [ $retries -eq 10 ] ; then echo " Timeout, aborting." ; exit 1 ; fi ; retries=$(($retries+1)) ; done
    - ./clair-scanner -c http://docker:6060 --ip $(hostname -i) -r gl-sast-container-report.json -l clair.log -w clair-whitelist.yml ${CI_APPLICATION_REPOSITORY}:${CI_APPLICATION_TAG} || true
  artifacts:
    paths: [gl-sast-container-report.json]
